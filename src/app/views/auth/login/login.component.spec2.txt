/*
import {ComponentFixture, fakeAsync, TestBed, tick} from '@angular/core/testing';
import { LoginComponent } from './login.component';
import { RouterTestingModule } from '@angular/router/testing';
import { AuthenticationService } from '../../../services/api/authentication.service';
import {
  SocialAuthService,
  GoogleLoginProvider,
  SocialAuthServiceConfig,
  GoogleInitOptions
} from '@abacritt/angularx-social-login';
import { UntypedFormGroup, UntypedFormControl } from '@angular/forms';
import {HttpClientModule} from "@angular/common/http";
import {throwError} from "rxjs";
import {Router} from "@angular/router";

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  const googleLoginOptions: GoogleInitOptions = { oneTapEnabled: false}// default is true };
  const routerSpy = jasmine.createSpyObj('Router', ['navigate']);

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ RouterTestingModule,HttpClientModule ],
      declarations: [ LoginComponent ],
      providers: [ AuthenticationService, {
        provide: 'SocialAuthServiceConfig',
        useValue: {
          autoLogin: false,
          providers: [
            {
              id: GoogleLoginProvider.PROVIDER_ID,
              provider: new GoogleLoginProvider(
                '124147147180-roi438596d3n7af2o66bpj2oospc68fl.apps.googleusercontent.com',
                googleLoginOptions ),
            }
          ],
          onError: (err) => {
            console.error(err);
          }
        } as SocialAuthServiceConfig,
      },
      ]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });


 //Pruebas para el inicio de sesión con Google:
  /*
  it('should login with Google', () => {
    spyOn(component.socialAuthService, 'signIn').and.callFake(() => {
      component.socialUser = {
        id: 'test_id',
        email: 'test@example.com',
        name: 'Test User',
        photoUrl: 'http://test.com/photo.jpg',
        provider: GoogleLoginProvider.PROVIDER_ID,
        idToken: 'test_token'
      };
      component.isLoggedin = true;
    });

    component.loginWithGoogle();
    expect(component.socialAuthService.signIn).toHaveBeenCalled();
    expect(component.socialUser).toBeDefined();
    expect(component.isLoggedin).toBeTruthy();
  });

  it('should logout with Google', () => {
    spyOn(component.socialAuthService, 'signOut').and.callFake(() => {
      component.socialUser = null;
      component.isLoggedin = false;
    });

    component.logOut();
    expect(component.socialAuthService.signOut).toHaveBeenCalled();
    expect(component.socialUser).toBeNull();
    expect(component.isLoggedin).toBeFalsy();
  });

  // Pruebas para el inicio de sesión con credenciales:
  it('should login with credentials', () => {
    const spy = spyOn(component.authenticationService, 'login').and.returnValue( {
      return Promise.resolve({
        success: true,
        token: 'test_token'
      });
    });

    component.loginForm.controls['email'].setValue('test@example.com');
    component.loginForm.controls['password'].setValue('password');
    component.logIn();
    expect(spy).toHaveBeenCalled();
  });
   */

  //Pruebas para el formulario de inicio de sesión:
  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should create login form', () => {
    expect(component.loginForm).toBeDefined();
    expect(component.loginForm instanceof UntypedFormGroup).toBeTruthy();
  });

  it('should mark email as invalid if empty', () => {
    const emailControl = component.loginForm.controls['email'];
    expect(emailControl.valid).toBeFalsy();
  });

  it('should mark password as invalid if empty', () => {
    const passwordControl = component.loginForm.controls['password'];
    expect(passwordControl.valid).toBeFalsy();
  });

  it('should mark email as invalid if invalid email format', () => {
    const emailControl = component.loginForm.controls['email'];
    emailControl.setValue('test');
    expect(emailControl.valid).toBeFalsy();
  });

  it('should mark email as valid if valid email format', () => {
    const emailControl = component.loginForm.controls['email'];
    emailControl.setValue('test@example.com');
    expect(emailControl.valid).toBeTruthy();
  });

  it('should be invalid if login with credentials fails', () => {
    //se utiliza un espía (spy) para interceptar la llamada al método login() del servicio de autenticación.
    // El espía se configura para devolver un error simulado cuando se llama al método login().
    // El error simulado incluye un mensaje de error "Login failed".
    const spy = spyOn(component.authenticationService, 'login').and.returnValue(
      throwError({
        error: {
          message: 'Login failed'
        }
      })
    );
    //se establecen los valores de los campos de correo electrónico y contraseña del formulario de inicio de sesión y se llama al método
    //e espera que la llamada al método login() del servicio de autenticación se haya realizado y se haya producido un error. Si la prueba pasa correctamente,
    // esto indica que el componente de inicio de sesión se ha considerado inválido debido al error en el servicio de autenticación.
    component.loginForm.controls['email'].setValue('client_ecommerce@gmail.com');
    component.loginForm.controls['password'].setValue('123456');
    component.logIn();
    expect(spy).toHaveBeenCalled();
    //expect(component.loginForm.valid).toBeTruthy();
    expect(component.errorMessage).toEqual('Invalid username or password');
  });

  it('should show error message on failed login', fakeAsync(() => {
    const errorResponse = { error: { message: 'Login failed' } };
    const errorObservable = throwError(errorResponse);

    spyOn(component.authenticationService, 'login').and.returnValue(errorObservable);

    component.logIn();

    tick(); // Esperar a que se complete la petición HTTP

    expect(component.loading).toBe(false);
    expect(routerSpy.navigate).not.toHaveBeenCalledWith(['/shop/products']);
  }));
});
*/
